// Generated by CoffeeScript 1.4.0
(function() {
  var getScreenSize, setH1Size, setMargins, setParSize;

  window.getStyle = function() {
    var index, myRules, percentage, rule, viewportSize, _i, _j, _len, _ref, _results, _results1;
    if (document.styleSheets) {
      myRules = new Array();
      viewportSize = getScreenSize();
      if (document.styleSheets[0].cssRules) {
        myRules = document.styleSheets[0].cssRules;
        _results = [];
        for (index = _i = 0, _len = myRules.length; _i < _len; index = ++_i) {
          rule = myRules[index];
          switch (rule.selectorText) {
            case '#message h1':
              _results.push(myRules[index].style.fontSize = setH1Size(viewportSize) + "px");
              break;
            case '#message p':
              _results.push(myRules[index].style.fontSize = setParSize(viewportSize) + "px");
              break;
            case '#message':
              percentage = setMargins(viewportSize);
              myRules[index].style.marginTop = percentage + "px";
              _results.push(myRules[index].style.marginBottom = percentage + "px");
              break;
            default:
              _results.push(void 0);
          }
        }
        return _results;
      } else if (document.styleSheets[0].rules) {
        myRules = document.styleSheets[0].rules;
        _results1 = [];
        for (index = _j = 0, _ref = myRules.length; 0 <= _ref ? _j <= _ref : _j >= _ref; index = 0 <= _ref ? ++_j : --_j) {
          if (myRules[index].selectorText.toLowerCase() !== null) {
            switch (myRules[index].selectorText.toLowerCase()) {
              case '#message h1':
                _results1.push(myRules[index].style.fontSize = setH1Size(viewportSize) + "px");
                break;
              case '#message p':
                _results1.push(myRules[index].style.fontSize = setParSize(viewportSize) + "px");
                break;
              case '#message':
                percentage = setMargins(viewportSize);
                myRules[index].style.marginTop = percentage + "px";
                _results1.push(myRules[index].style.marginBottom = percentage + "px");
                break;
              default:
                _results1.push(void 0);
            }
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }
    } else {
      return alert("No style found");
    }
  };

  window.onresize = function() {
    return getStyle();
  };

  setH1Size = function(viewport) {
    var height, width;
    width = viewport[0];
    height = viewport[1];
    if (width < height) {
      return parseInt(0.0918 * width);
    } else {
      return parseInt(0.0918 * height);
    }
  };

  setParSize = function(viewport) {
    var height, width;
    width = viewport[0];
    height = viewport[1];
    if (width < height) {
      return parseInt(0.037 * width);
    } else {
      return parseInt(0.037 * height);
    }
  };

  /*
  This function returns the size of the top and bottom margin in dependency
  of the viewport height, mode (portrait or landscape) and aspect ratio.
  */


  setMargins = function(viewport) {
    var height, width;
    width = viewport[0];
    height = viewport[1];
    if (height > width && height / width < 0.79) {
      return parseInt(0.3 * height);
    } else {
      return parseInt(0.2 * height);
    }
  };

  getScreenSize = function() {
    var ifClntWidth, ifDocElem, viewport, viewportheight, viewportwidth;
    ifDocElem = false;
    ifClntWidth = false;
    if (typeof document.documentElement !== 'undefined') {
      ifDocElem = true;
    }
    if (typeof document.documentElement.clientWidth !== 'undefined') {
      ifClntWidth = true;
    }
    if (document.documentElement.clientWidth === 0) {
      ifClntWidth = false;
    }
    if (typeof window.innerWidth !== 'undefined') {
      viewportwidth = window.innerWidth;
      viewportheight = window.innerHeight;
      return viewport = [viewportwidth, viewportheight];
    } else if (ifDocElem && ifClntWidth) {
      viewportwidth = document.documentElement.clientWidth;
      viewportheight = document.documentElement.clientHeight;
      return viewport = [viewportwidth, viewportheight];
    } else {
      viewportwidth = document.getElementsByTagName('body')[0].clientWidth;
      viewportheight = document.getElementsByTagName('body')[0].clientHeight;
      return viewport = [viewportwidth, viewportheight];
    }
  };

}).call(this);
